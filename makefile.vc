# Dynamic Windows Interface Builder Makefile for Win32

# Either add environment variables for DWLIBDIR and DWINCDIR or
# Uncomment and change these as needed
#DWLIBDIR=\netlabs\dwindows\lib
#DWINCDIR=\netlabs\dwindows
#XML2LIBDIR=\lib
#XML2INCDIR=\include

TARGET=dwib

# Configure alternate compiler based on Clang/LLVM
!if "$(CLANG)" == "Y"
WLIB=llvm-lib.exe
CC=clang-cl.exe
LINK=lld-link.exe
!else
WLIB=lib.exe
CC=cl.exe
LINK=link.exe
!endif

#
# Configure settings for the target platform
#	Default to x86 if not specified
#
!if "$(TARGET_CPU)" == ""
!if "$(VSCMD_ARG_TGT_ARCH)" == ""
!if "$(PLATFORM)" == ""
TARGET_CPU=x86
!else
TARGET_CPU=$(PLATFORM)
!endif
!else
TARGET_CPU=$(VSCMD_ARG_TGT_ARCH)
!endif
!endif

!if "$(TARGET_CPU)" == "x86"
PLATFORM_DEF = -DWIN32
!else
PLATFORM_DEF = -DWIN64
!endif

#
# Settings for either debug or release
#
!if "$(DEBUG)" == "Y"
CFLAGS_DEBUG = -Z7 -Od -MTd # was -Zi
LINK_DEBUG = -debug
!else
CFLAGS_DEBUG = -Ox -MT
LINK_DEBUG = -release
!endif

# Check the Mercurial revision number if possible
!if ![hg log -r . --template="VER_REV={rev}" > HG.REV]
!include HG.REV
!message Revision is [$(VER_REV)]
!else
VER_REV=0
!endif

!include Version

# The Visual C CRT and other Windows components have deprecated lots of common functions
# These options will hide the deprecation warnings; Comment the next line to see them
CRT_FLAGS = -D_CRT_SECURE_NO_DEPRECATE -D_CRT_SECURE_NO_WARNING -D_WINSOCK_DEPRECATED_NO_WARNINGS

CFLAGS = -c $(PLATFORM_DEF) -D__WIN32__ -DMSVC -D__TARGET__=\"$(TARGET)\" -I. -I$(DWINCDIR) -I$(XML2INCDIR) -DVER_MAJ=$(VER_MAJ) -D VER_MIN=$(VER_MIN) -DVER_REV=$(VER_REV) $(CRT_FLAGS)
LIBS = wsock32.lib kernel32.lib user32.lib comctl32.lib gdi32.lib advapi32.lib shell32.lib comdlg32.lib $(DWLIBDIR)\dw.lib $(XML2LIBDIR)\libxml2_a.lib
RES = 
LINKFLAGS = -machine:$(TARGET_CPU) -manifest $(LINK_DEBUG)
DLLLINKFLAGS = -dll
DEFFILE = win\dwib.def

OBJS =	dwib.obj \
        dwib_lib.obj \
        winmain.obj

LIBOBJS = dwib_lib.obj
        
all: dwib.exe dwib.dll example.exe

clean:
	-erase *.dll
        -erase *.exe
        -erase *.opt
        -erase *.lib
        -erase *.obj
        -erase *.map
        -erase *.pdb
        -erase *.ilk
        -erase *.exp
        -erase win\*.res
        -erase *~
        
# Create a zip file for use with Nullsoft's Install system
# Requires NSIS and makensis to be in the PATH     
installer:
    -rd /s /q install\package
    md install\package
    copy dwib.exe install\package
    copy $(DWINCDIR)\dw.dll install\package
    copy readme.txt install\package
    copy install\scripts\license.txt install\package
    cd install\package
    copy ..\dwib-$(TARGET_CPU).nsi dwib.nsi
    makensis dwib.nsi
    move dwib*win*.exe ..

dwib.res: win\dwib.rc
	rc -r win\dwib.rc

dwib.exe: $(OBJS) win\dwib.res
	$(LINK) @<<
-out:$(@) -subsystem:windows
$(LINKFLAGS)
$(OBJS)
$(LIBS)
win\dwib.res
<<
	mt.exe -manifest dwib.exe.manifest win\dwib.exe.$(TARGET_CPU).manifest -outputresource:dwib.exe;1
 
dwib.dll: $(LIBOBJS) $(DEFFILE)
	$(LINK) @<<
-out:$(@) -def:$(DEFFILE)
$(LINKFLAGS) $(DLLLINKFLAGS)
$(LIBOBJS) $(RES)
$(LIBS)
<<
	$(WLIB) -def:$(DEFFILE) -machine:$(TARGET_CPU) -out:dwib.lib
	mt.exe -manifest dwib.dll.manifest win\dwib.dll.$(TARGET_CPU).manifest -outputresource:dwib.dll;2
 
example.exe: example.obj winmain.obj
	$(LINK) @<<
-out:$(@) -subsystem:windows
$(LINKFLAGS)
example.obj winmain.obj
$(LIBS) dwib.lib

<<
	mt.exe -manifest example.exe.manifest win\example.exe.$(TARGET_CPU).manifest -outputresource:example.exe;1
 
.c.obj:
	$(CC) $(CFLAGS) $(CFLAGS_DEBUG) $(CFLAGS_COMPILE) $*.c
